{
 "PRed":[
  {
   "PR":{
    "__lazy_json__":"pr_json/468924794.json"
   },
   "data":{
    "bot_rerun":false,
    "migrator_name":"Version",
    "migrator_version":0,
    "version":"0.19.0"
   },
   "keys":[
    "bot_rerun",
    "migrator_name",
    "migrator_version",
    "version"
   ]
  }
 ],
 "bad":false,
 "conda-forge.yml":{
  "provider":{
   "linux":"azure",
   "osx":"azure",
   "win":"azure"
  }
 },
 "feedstock_name":"pyfai",
 "hash_type":"sha256",
 "linux_64_meta_yaml":{
  "about":{
   "description":"pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url":"https://github.com/silx-kit/pyFAI/",
   "doc_url":"http://pythonhosted.org/pyFAI/",
   "home":"https://github.com/silx-kit/pyFAI/",
   "license":"GPL-3",
   "license_file":"copyright",
   "summary":"Python implementation of fast azimuthal integration"
  },
  "build":{
   "entry_points":[
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number":0,
   "script":"-m pip install . --no-deps --ignore-installed -vv"
  },
  "package":{
   "name":"pyfai",
   "version":"0.19.0"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host":[
    "python",
    "cython",
    "numpy",
    "pip"
   ],
   "run":[
    "python",
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "pillow",
    "scipy",
    "silx",
    "numpy"
   ]
  },
  "source":{
   "sha256":"4dcbc92470997b5002d5626da4df428ab12efcfcec437d4cb001f41141665774",
   "url":"https://pypi.io/packages/source/p/pyFAI/pyFAI-0.19.0.tar.gz"
  },
  "test":{
   "commands":[
    "pyFAI-calib -h"
   ],
   "imports":[
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI.gui"
   ]
  }
 },
 "linux_64_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "numpy",
    "pillow",
    "python",
    "scipy",
    "silx"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "meta_yaml":{
  "about":{
   "description":"pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url":"https://github.com/silx-kit/pyFAI/",
   "doc_url":"http://pythonhosted.org/pyFAI/",
   "home":"https://github.com/silx-kit/pyFAI/",
   "license":"GPL-3",
   "license_file":"copyright",
   "summary":"Python implementation of fast azimuthal integration"
  },
  "build":{
   "entry_points":[
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main",
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number":0,
   "script":"-m pip install . --no-deps --ignore-installed -vv"
  },
  "package":{
   "name":"pyfai",
   "version":"0.19.0"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host":[
    "python",
    "cython",
    "numpy",
    "pip",
    "python",
    "cython",
    "numpy",
    "pip",
    "python",
    "cython",
    "numpy",
    "pip"
   ],
   "run":[
    "python",
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "pillow",
    "scipy",
    "silx",
    "numpy",
    "python",
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "pillow",
    "scipy",
    "silx",
    "numpy",
    "python",
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "pillow",
    "scipy",
    "silx",
    "numpy"
   ]
  },
  "source":{
   "sha256":"4dcbc92470997b5002d5626da4df428ab12efcfcec437d4cb001f41141665774",
   "url":"https://pypi.io/packages/source/p/pyFAI/pyFAI-0.19.0.tar.gz"
  },
  "test":{
   "commands":[
    "pyFAI-calib -h",
    "pyFAI-calib -h",
    "pyFAI-calib -h"
   ],
   "imports":[
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI.gui",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI.gui",
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI.gui"
   ]
  }
 },
 "name":"pyfai",
 "new_version":"0.19.0",
 "new_version_attempts":{
  "0.19.0":1
 },
 "new_version_errors":{},
 "osx_64_meta_yaml":{
  "about":{
   "description":"pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url":"https://github.com/silx-kit/pyFAI/",
   "doc_url":"http://pythonhosted.org/pyFAI/",
   "home":"https://github.com/silx-kit/pyFAI/",
   "license":"GPL-3",
   "license_file":"copyright",
   "summary":"Python implementation of fast azimuthal integration"
  },
  "build":{
   "entry_points":[
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number":"0",
   "script":"-m pip install . --no-deps --ignore-installed -vv"
  },
  "package":{
   "name":"pyfai",
   "version":"0.19.0"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host":[
    "python",
    "cython",
    "numpy",
    "pip"
   ],
   "run":[
    "python",
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "pillow",
    "scipy",
    "silx",
    "numpy"
   ]
  },
  "source":{
   "sha256":"4dcbc92470997b5002d5626da4df428ab12efcfcec437d4cb001f41141665774",
   "url":"https://pypi.io/packages/source/p/pyFAI/pyFAI-0.19.0.tar.gz"
  },
  "test":{
   "commands":[
    "pyFAI-calib -h"
   ],
   "imports":[
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI.gui"
   ]
  }
 },
 "osx_64_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "numpy",
    "pillow",
    "python",
    "scipy",
    "silx"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "pinning_version":"2020.08.15.14.59.48",
 "raw_meta_yaml":"{% set name = \"pyFAI\" %}\n{% set version = \"0.19.0\" %}\n{% set sha256 = \"4dcbc92470997b5002d5626da4df428ab12efcfcec437d4cb001f41141665774\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 0\n  script: {{ PYTHON }} -m pip install . --no-deps --ignore-installed -vv\n  entry_points:\n    - check_calib = pyFAI.app.check_calib:main\n    - detector2nexus = pyFAI.app.detector2nexus:main\n    - diff_map = pyFAI.app.diff_map:main\n    - diff_tomo = pyFAI.app.diff_tomo:main\n    - eiger-mask = pyFAI.app.eiger_mask:main\n    - MX-calibrate = pyFAI.app.mx_calibrate:main\n    - pyFAI-average = pyFAI.app.average:main\n    - pyFAI-benchmark = pyFAI.app.benchmark:main\n    - pyFAI-calib = pyFAI.app.calib:main\n    - pyFAI-calib2 = pyFAI.app.calib2:main\n    - pyFAI-drawmask = pyFAI.app.drawmask:main\n    - pyFAI-integrate = pyFAI.app.integrate:main\n    - pyFAI-recalib = pyFAI.app.recalib:main\n    - pyFAI-saxs = pyFAI.app.saxs:main\n    - pyFAI-waxs = pyFAI.app.waxs:main\n  skip: true  # [py<36]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n  host:\n    - python\n    - cython\n    - numpy\n    - pip\n  run:\n    - python\n    - fabio\n    - h5py\n    - lxml\n    - matplotlib\n    - pillow\n    - scipy\n    - silx\n    - {{ pin_compatible('numpy') }}\n\ntest:\n  imports:\n    - pyFAI\n    - pyFAI.test\n    - pyFAI.third_party\n    - pyFAI.gui\n  commands:\n    - pyFAI-calib -h\n\nabout:\n  home: https://github.com/silx-kit/pyFAI/\n  license: GPL-3\n  license_file: copyright\n  summary: Python implementation of fast azimuthal integration\n  description: |\n    pyFAI is an azimuthal integration library that tries to be fast (as fast\n    as C and even more using OpenCL and GPU). It is based on histogramming of\n    the 2theta/Q positions of each (center of) pixel weighted by the intensity\n    of each pixel, but parallel version uses a SparseMatrix-DenseVector\n    multiplication. Neighboring output bins get also a contribution of pixels\n    next to the border thanks to pixel splitting. Finally pyFAI provides also\n    tools to calibrate the experimental setup using Debye-Scherrer rings of a\n    reference compound.\n  doc_url: http://pythonhosted.org/pyFAI/\n  dev_url: https://github.com/silx-kit/pyFAI/\n",
 "req":{
  "__set__":true,
  "elements":[
   "c_compiler_stub",
   "cxx_compiler_stub",
   "cython",
   "fabio",
   "h5py",
   "lxml",
   "matplotlib",
   "numpy",
   "pillow",
   "pip",
   "python",
   "scipy",
   "silx"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "numpy",
    "pillow",
    "python",
    "scipy",
    "silx"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "smithy_version":"No azure token. Create a token and\nput it in ~/.conda-smithy/azure.token\n3.7.10",
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "numpy",
    "pillow",
    "python",
    "scipy",
    "silx"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://pypi.io/packages/source/p/pyFAI/pyFAI-0.18.0.tar.gz",
 "version":"0.19.0",
 "win_64_meta_yaml":{
  "about":{
   "description":"pyFAI is an azimuthal integration library that tries to be fast (as fast\nas C and even more using OpenCL and GPU). It is based on histogramming of\nthe 2theta/Q positions of each (center of) pixel weighted by the intensity\nof each pixel, but parallel version uses a SparseMatrix-DenseVector\nmultiplication. Neighboring output bins get also a contribution of pixels\nnext to the border thanks to pixel splitting. Finally pyFAI provides also\ntools to calibrate the experimental setup using Debye-Scherrer rings of a\nreference compound.\n",
   "dev_url":"https://github.com/silx-kit/pyFAI/",
   "doc_url":"http://pythonhosted.org/pyFAI/",
   "home":"https://github.com/silx-kit/pyFAI/",
   "license":"GPL-3",
   "license_file":"copyright",
   "summary":"Python implementation of fast azimuthal integration"
  },
  "build":{
   "entry_points":[
    "check_calib = pyFAI.app.check_calib:main",
    "detector2nexus = pyFAI.app.detector2nexus:main",
    "diff_map = pyFAI.app.diff_map:main",
    "diff_tomo = pyFAI.app.diff_tomo:main",
    "eiger-mask = pyFAI.app.eiger_mask:main",
    "MX-calibrate = pyFAI.app.mx_calibrate:main",
    "pyFAI-average = pyFAI.app.average:main",
    "pyFAI-benchmark = pyFAI.app.benchmark:main",
    "pyFAI-calib = pyFAI.app.calib:main",
    "pyFAI-calib2 = pyFAI.app.calib2:main",
    "pyFAI-drawmask = pyFAI.app.drawmask:main",
    "pyFAI-integrate = pyFAI.app.integrate:main",
    "pyFAI-recalib = pyFAI.app.recalib:main",
    "pyFAI-saxs = pyFAI.app.saxs:main",
    "pyFAI-waxs = pyFAI.app.waxs:main"
   ],
   "number":"0",
   "script":"-m pip install . --no-deps --ignore-installed -vv"
  },
  "package":{
   "name":"pyfai",
   "version":"0.19.0"
  },
  "requirements":{
   "build":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ],
   "host":[
    "python",
    "cython",
    "numpy",
    "pip"
   ],
   "run":[
    "python",
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "pillow",
    "scipy",
    "silx",
    "numpy"
   ]
  },
  "source":{
   "sha256":"4dcbc92470997b5002d5626da4df428ab12efcfcec437d4cb001f41141665774",
   "url":"https://pypi.io/packages/source/p/pyFAI/pyFAI-0.19.0.tar.gz"
  },
  "test":{
   "commands":[
    "pyFAI-calib -h"
   ],
   "imports":[
    "pyFAI",
    "pyFAI.test",
    "pyFAI.third_party",
    "pyFAI.gui"
   ]
  }
 },
 "win_64_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "c_compiler_stub",
    "cxx_compiler_stub"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[
    "cython",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run":{
   "__set__":true,
   "elements":[
    "fabio",
    "h5py",
    "lxml",
    "matplotlib",
    "numpy",
    "pillow",
    "python",
    "scipy",
    "silx"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 }
}