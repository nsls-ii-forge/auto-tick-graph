{
 "bad":"Upstream: Error getting upstream version",
 "conda-forge.yml":{
  "provider":{
   "linux":"azure",
   "osx":"azure",
   "win":"azure"
  }
 },
 "feedstock_name":"mongoquery",
 "hash_type":"sha256",
 "linux_64_meta_yaml":{
  "about":{
   "home":"https://github.com/kapouille/mongoquery",
   "license":"Public Domain",
   "summary":"A utility library that provides a MongoDB-like query language for querying python collections. It's mainly intended to parse objects structured as fundamental types in a similar fashion to what is produced by JSON or YAML parsers.\n"
  },
  "build":{
   "noarch":"python",
   "number":"0",
   "script":" -m pip install . --no-deps -vv"
  },
  "package":{
   "name":"mongoquery",
   "version":"1.1.0"
  },
  "requirements":{
   "build":[
    "python",
    "pip"
   ],
   "run":[
    "python"
   ]
  },
  "source":{
   "sha256":"d1e87f6038ea074273610b6258e5af7477de61c782f6424fc7ecf3416df3e645",
   "url":"https://github.com/kapouille/mongoquery/archive/v1.1.0.tar.gz"
  },
  "test":{
   "imports":[
    "mongoquery"
   ]
  }
 },
 "linux_64_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[
    "python"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "meta_yaml":{
  "about":{
   "home":"https://github.com/kapouille/mongoquery",
   "license":"Public Domain",
   "summary":"A utility library that provides a MongoDB-like query language for querying python collections. It's mainly intended to parse objects structured as fundamental types in a similar fashion to what is produced by JSON or YAML parsers.\n"
  },
  "build":{
   "noarch":"python",
   "number":"0",
   "script":" -m pip install . --no-deps -vv"
  },
  "package":{
   "name":"mongoquery",
   "version":"1.1.0"
  },
  "requirements":{
   "build":[
    "python",
    "pip",
    "python",
    "pip",
    "python",
    "pip"
   ],
   "run":[
    "python",
    "python",
    "python"
   ]
  },
  "source":{
   "sha256":"d1e87f6038ea074273610b6258e5af7477de61c782f6424fc7ecf3416df3e645",
   "url":"https://github.com/kapouille/mongoquery/archive/v1.1.0.tar.gz"
  },
  "test":{
   "imports":[
    "mongoquery",
    "mongoquery",
    "mongoquery"
   ]
  }
 },
 "name":"mongoquery",
 "new_version":false,
 "osx_64_meta_yaml":{
  "about":{
   "home":"https://github.com/kapouille/mongoquery",
   "license":"Public Domain",
   "summary":"A utility library that provides a MongoDB-like query language for querying python collections. It's mainly intended to parse objects structured as fundamental types in a similar fashion to what is produced by JSON or YAML parsers.\n"
  },
  "build":{
   "noarch":"python",
   "number":"0",
   "script":" -m pip install . --no-deps -vv"
  },
  "package":{
   "name":"mongoquery",
   "version":"1.1.0"
  },
  "requirements":{
   "build":[
    "python",
    "pip"
   ],
   "run":[
    "python"
   ]
  },
  "source":{
   "sha256":"d1e87f6038ea074273610b6258e5af7477de61c782f6424fc7ecf3416df3e645",
   "url":"https://github.com/kapouille/mongoquery/archive/v1.1.0.tar.gz"
  },
  "test":{
   "imports":[
    "mongoquery"
   ]
  }
 },
 "osx_64_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[
    "python"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "raw_meta_yaml":"{% set name = \"mongoquery\" %}\n{% set version = \"1.1.0\" %}\n{% set sha256 = \"d1e87f6038ea074273610b6258e5af7477de61c782f6424fc7ecf3416df3e645\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/kapouille/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  noarch: python\n  number: 0\n  script: \"{{ PYTHON }} -m pip install . --no-deps -vv\"\n\nrequirements:\n  build:\n    - python\n    - pip\n  run:\n    - python\n\ntest:\n  imports:\n    - mongoquery\n\nabout:\n  home: https://github.com/kapouille/mongoquery\n  license: Public Domain\n  summary: >\n    A utility library that provides a MongoDB-like query\n    language for querying python collections. It's mainly\n    intended to parse objects structured as fundamental types in\n    a similar fashion to what is produced by JSON or YAML\n    parsers.\n",
 "req":{
  "__set__":true,
  "elements":[
   "pip",
   "python"
  ]
 },
 "requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[
    "python"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "strong_exports":false,
 "total_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[
    "python"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 },
 "url":"https://github.com/kapouille/mongoquery/archive/v1.1.0.tar.gz",
 "version":"1.1.0",
 "win_64_meta_yaml":{
  "about":{
   "home":"https://github.com/kapouille/mongoquery",
   "license":"Public Domain",
   "summary":"A utility library that provides a MongoDB-like query language for querying python collections. It's mainly intended to parse objects structured as fundamental types in a similar fashion to what is produced by JSON or YAML parsers.\n"
  },
  "build":{
   "noarch":"python",
   "number":"0",
   "script":" -m pip install . --no-deps -vv"
  },
  "package":{
   "name":"mongoquery",
   "version":"1.1.0"
  },
  "requirements":{
   "build":[
    "python",
    "pip"
   ],
   "run":[
    "python"
   ]
  },
  "source":{
   "sha256":"d1e87f6038ea074273610b6258e5af7477de61c782f6424fc7ecf3416df3e645",
   "url":"https://github.com/kapouille/mongoquery/archive/v1.1.0.tar.gz"
  },
  "test":{
   "imports":[
    "mongoquery"
   ]
  }
 },
 "win_64_requirements":{
  "build":{
   "__set__":true,
   "elements":[
    "pip",
    "python"
   ]
  },
  "host":{
   "__set__":true,
   "elements":[]
  },
  "run":{
   "__set__":true,
   "elements":[
    "python"
   ]
  },
  "test":{
   "__set__":true,
   "elements":[]
  }
 }
}